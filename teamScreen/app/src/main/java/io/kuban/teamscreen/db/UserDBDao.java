package io.kuban.teamscreen.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import io.kuban.teamscreen.model.UserDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_DB".
*/
public class UserDBDao extends AbstractDao<UserDB, Long> {

    public static final String TABLENAME = "USER_DB";

    /**
     * Properties of entity UserDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserMap = new Property(1, String.class, "userMap", false, "USER_MAP");
        public final static Property VisitorsId = new Property(2, String.class, "visitorsId", false, "VISITORS_ID");
        public final static Property IsSignin = new Property(3, boolean.class, "isSignin", false, "IS_SIGNIN");
    };


    public UserDBDao(DaoConfig config) {
        super(config);
    }
    
    public UserDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_MAP\" TEXT," + // 1: userMap
                "\"VISITORS_ID\" TEXT," + // 2: visitorsId
                "\"IS_SIGNIN\" INTEGER NOT NULL );"); // 3: isSignin
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userMap = entity.getUserMap();
        if (userMap != null) {
            stmt.bindString(2, userMap);
        }
 
        String visitorsId = entity.getVisitorsId();
        if (visitorsId != null) {
            stmt.bindString(3, visitorsId);
        }
        stmt.bindLong(4, entity.getIsSignin() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userMap = entity.getUserMap();
        if (userMap != null) {
            stmt.bindString(2, userMap);
        }
 
        String visitorsId = entity.getVisitorsId();
        if (visitorsId != null) {
            stmt.bindString(3, visitorsId);
        }
        stmt.bindLong(4, entity.getIsSignin() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserDB readEntity(Cursor cursor, int offset) {
        UserDB entity = new UserDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userMap
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // visitorsId
            cursor.getShort(offset + 3) != 0 // isSignin
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserMap(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVisitorsId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsSignin(cursor.getShort(offset + 3) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
